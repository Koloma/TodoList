//
//  LoginSceneViewController.swift
//  TodoList
//
//  Created by Коломенский Александр on 23.02.2023.
//  Copyright (c) 2023 KAV. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ILoginSceneViewController: AnyObject{
	func render(viewModel: LoginSceneModels.ViewModel)
}

class LoginSceneViewController: UIViewController
{

	private var interactor: ILoginSceneInteractor?
	var router: (NSObjectProtocol & ILoginSceneRouter & ILoginSceneDataStore)?

	private var textFieldLogin: UITextField = UITextField()
	private var textFieldPass: UITextField = UITextField()
	private var loginButton: UIButton = UIButton()

	// MARK: Object lifecycle
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
	{
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder)
	{
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: Setup
	private func setup()
	{
		let viewController = self
		let worker = LoginWorker()
		let presenter = LoginScenePresenter(viewController: viewController)
		self.interactor = LoginSceneInteractor(worker: worker, presenter: presenter)
		let router = LoginSceneRouter(viewController: viewController)
		
		//viewController.router = router

		router.viewController = viewController
		//router.dataStore = interactor
	}

	// MARK: Routing
	override func prepare(for segue: UIStoryboardSegue, sender: Any?)
	{
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}

	// MARK: View lifecycle
	override func viewDidLoad()
	{
		super.viewDidLoad()
		setupView()
	}

	private func setupView() {
		view.backgroundColor = .systemBackground
		view.addSubview(textFieldLogin)
		textFieldLogin.autocorrectionType = .no
		textFieldLogin.autocapitalizationType = .none
		textFieldLogin.placeholder = "Login"
		textFieldLogin.translatesAutoresizingMaskIntoConstraints = false
		textFieldLogin.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
		textFieldLogin.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
		textFieldLogin.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 50.0).isActive = true
		textFieldLogin.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -50.0).isActive = true
		textFieldLogin.heightAnchor.constraint(equalToConstant: 40.0).isActive = true

		view.addSubview(textFieldPass)
		textFieldPass.placeholder = "Password"
		textFieldPass.isSecureTextEntry = true
		textFieldPass.autocorrectionType = .no
		textFieldPass.translatesAutoresizingMaskIntoConstraints = false
		textFieldPass.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
		textFieldPass.topAnchor.constraint(equalTo: textFieldLogin.bottomAnchor, constant: 16.0).isActive = true
		textFieldPass.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 50.0).isActive = true
		textFieldPass.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -50.0).isActive = true
		textFieldPass.heightAnchor.constraint(equalToConstant: 40.0).isActive = true

		view.addSubview(loginButton)

		loginButton.setTitle("Login", for: .normal)
		loginButton.translatesAutoresizingMaskIntoConstraints = false
		loginButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
		loginButton.topAnchor.constraint(equalTo: textFieldPass.bottomAnchor, constant: 16.0).isActive = true
		loginButton.addTarget(self, action: #selector(buttonLogin), for: .touchUpInside)
	}

	@objc func buttonLogin(sender:UIButton) {
		if let email = textFieldLogin.text, let password = textFieldPass.text {
			let request = LoginSceneModels.Request(login: email, password: password)
			interactor?.login(request: request)
		}
	}
}

extension LoginSceneViewController: ILoginSceneViewController {
	func render(viewModel: LoginSceneModels.ViewModel) {
		let alert: UIAlertController

		if viewModel.success {
			alert = UIAlertController(
				title: "Success",
				message: viewModel.userName,
				preferredStyle: UIAlertController.Style.alert
			)
			router?.routeToMainScene()
		} else {
			alert = UIAlertController(
				title: "Error",
				message: "",
				preferredStyle: UIAlertController.Style.alert
			)
		}

		let action = UIAlertAction(title: "Ok", style: .default)
		alert.addAction(action)
		present(alert, animated: true, completion: nil)
	}
}
